generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  Account       Account[]
  Session       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model blog {
  article_id          Int       @id @default(autoincrement())
  article_date        DateTime? @default(now()) @db.Date
  article_image_small String?   @db.VarChar(300)
  article_image       String?   @db.VarChar(300)
  article_title       String?   @db.VarChar(100)
  article_post        String?
  article_public      Boolean?
  comment             comment[]
}

model booking {
  booking_id   Int      @id @default(autoincrement())
  booking_date DateTime @db.Timestamptz(6)
  booking_time Int?     @db.SmallInt
  doctor_id    Int
  patient_id   Int
  doctor       doctor   @relation(fields: [doctor_id], references: [doctor_id], onDelete: NoAction, onUpdate: NoAction)
  patient      patient  @relation(fields: [patient_id], references: [patient_id], onDelete: NoAction, onUpdate: NoAction)
}

model comment {
  comment_id         Int       @id @default(autoincrement())
  comment_date       DateTime? @default(now()) @db.Timestamp(6)
  comment_user_name  String?   @db.VarChar(100)
  comment_body       String?   @db.VarChar(500)
  comment_user_image String?   @db.VarChar(150)
  article_id         Int?
  blog               blog?     @relation(fields: [article_id], references: [article_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_1")
}

model commenttb {
  comment_id        Int       @id @default(autoincrement())
  comment_date      DateTime? @default(now()) @db.Timestamp(6)
  comment_user_name String?   @db.VarChar(100)
  comment_body      String?   @db.VarChar(250)
  drink_id          Int?
  drinkdb           drinkdb?  @relation(fields: [drink_id], references: [drink_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_1")
}

model drinkdb {
  drink_id          Int         @id @default(autoincrement())
  drink_name        String?     @db.VarChar(50)
  drink_group       String?     @default("margaritas") @db.VarChar(30)
  drink_url         String?     @db.VarChar(500)
  drink_ingredients String?
  drink_directions  String?
  drink_price       Int?        @default(20)
  commenttb         commenttb[]
}

model ordertb {
  orderid   Int     @id @default(autoincrement())
  productid Int     @unique
  quantity  Int?    @db.SmallInt
  storedb   storedb @relation(fields: [productid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reel {
  reel_id              Int       @id @default(autoincrement())
  reel_date            DateTime? @default(now()) @db.Timestamp(6)
  reel_image           String?   @db.VarChar(300)
  reel_category        String?   @default("Outdoor") @db.VarChar(80)
  reel_public          Boolean?
  reel_video           Boolean?
  reel_video_thumbnail String?   @db.VarChar(150)
}

model storedb {
  id         Int      @id @default(autoincrement())
  pname      String?  @db.VarChar(50)
  price      String?  @db.VarChar(4)
  pictureurl String?  @db.VarChar(500)
  ordertb    ordertb?
}

model survey {
  survey_id     Int       @id @default(autoincrement())
  survey_date   DateTime? @default(now()) @db.Timestamp(6)
  survey_name   String?   @db.VarChar(100)
  survey_email  String?   @db.VarChar(200)
  survey_choice String    @db.VarChar(100)
}

model doctor {
  doctor_id          Int       @id @default(autoincrement())
  doctor_first_name  String?   @db.VarChar(30)
  doctor_last_name   String?   @db.VarChar(30)
  doctor_email       String    @db.VarChar(100)
  doctor_description String?   @db.VarChar(10000)
  doctor_image       String?   @db.VarChar(500)
  doctor_phone       Int?
  booking            booking[]
}

model patient {
  patient_id         Int       @id @default(autoincrement())
  patient_first_name String?   @db.VarChar(30)
  patient_last_name  String?   @db.VarChar(30)
  patient_email      String    @db.VarChar(100)
  patient_phone      Int?
  booking            booking[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AccountInfo {
  account_id    BigInt       @id @default(autoincrement())
  created_at    DateTime     @default(now()) @db.Timestamptz(6)
  account_first String?
  account_last  String?
  account_email String?
  CookieInfo    CookieInfo[]
  OrderInfo     OrderInfo[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model CartInfo {
  cart_id       BigInt     @id @default(autoincrement())
  created_at    DateTime   @default(now()) @db.Timestamptz(6)
  cookie_id     String     @db.Uuid
  quantity      Decimal    @db.Decimal
  price_id      String
  product_id    String?
  product_price Decimal    @db.Decimal
  CookieInfo    CookieInfo @relation(fields: [cookie_id], references: [cookie_id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model CookieInfo {
  cookie_id   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at  DateTime     @default(now()) @db.Timestamptz(6)
  account_id  BigInt?
  CartInfo    CartInfo[]
  AccountInfo AccountInfo? @relation(fields: [account_id], references: [account_id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model OrderInfo {
  order_id       Int         @id(map: "orderinfo_pkey") @default(autoincrement())
  order_date     DateTime    @default(now()) @db.Timestamptz(6)
  account_id     BigInt
  order_products Json[]
  AccountInfo    AccountInfo @relation(fields: [account_id], references: [account_id], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ProductInfo {
  product_id                 BigInt   @id @default(autoincrement())
  last_update                DateTime @default(now()) @db.Timestamptz(6)
  product_name               String?
  product_description        String?
  product_image              String?
  product_available_quantity Decimal? @default(10) @db.Decimal
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UserInfo {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  username   String?  @unique @default("ciao") @db.VarChar
  password   String?  @default("ster") @db.VarChar
}
