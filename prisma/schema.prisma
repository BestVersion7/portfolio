generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String              @id
  name              String?
  email             String?             @unique
  emailVerified     DateTime?
  image             String?
  Account           Account[]
  CookieInfo        CookieInfo[]
  ProductReviewInfo ProductReviewInfo[]
  Session           Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model blog {
  article_id          Int       @id @default(autoincrement())
  article_date        DateTime? @default(now()) @db.Date
  article_image_small String?   @db.VarChar(300)
  article_image       String?   @db.VarChar(300)
  article_title       String?   @db.VarChar(100)
  article_post        String?
  article_public      Boolean?
  comment             comment[]
}

model booking {
  booking_id   Int      @id @default(autoincrement())
  booking_date DateTime @db.Timestamptz(6)
  booking_time Int?     @db.SmallInt
  doctor_id    Int
  patient_id   Int
  doctor       doctor   @relation(fields: [doctor_id], references: [doctor_id], onDelete: NoAction, onUpdate: NoAction)
  patient      patient  @relation(fields: [patient_id], references: [patient_id], onDelete: NoAction, onUpdate: NoAction)
}

model comment {
  comment_id         Int       @id @default(autoincrement())
  comment_date       DateTime? @default(now()) @db.Timestamp(6)
  comment_user_name  String?   @db.VarChar(100)
  comment_body       String?   @db.VarChar(500)
  comment_user_image String?   @db.VarChar(150)
  article_id         Int?
  blog               blog?     @relation(fields: [article_id], references: [article_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_1")
}

model commenttb {
  comment_id        Int       @id @default(autoincrement())
  comment_date      DateTime? @default(now()) @db.Timestamp(6)
  comment_user_name String?   @db.VarChar(100)
  comment_body      String?   @db.VarChar(250)
  drink_id          Int?
  drinkdb           drinkdb?  @relation(fields: [drink_id], references: [drink_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_1")
}

model drinkdb {
  drink_id          Int         @id @default(autoincrement())
  drink_name        String?     @db.VarChar(50)
  drink_group       String?     @default("margaritas") @db.VarChar(30)
  drink_url         String?     @db.VarChar(500)
  drink_ingredients String?
  drink_directions  String?
  drink_price       Int?        @default(20)
  commenttb         commenttb[]
}

model reel {
  reel_id              Int       @id @default(autoincrement())
  reel_date            DateTime? @default(now()) @db.Timestamp(6)
  reel_image           String?   @db.VarChar(300)
  reel_category        String?   @default("Outdoor") @db.VarChar(80)
  reel_public          Boolean?
  reel_video           Boolean?
  reel_video_thumbnail String?   @db.VarChar(150)
}

model survey {
  survey_id     Int       @id @default(autoincrement())
  survey_date   DateTime? @default(now()) @db.Timestamp(6)
  survey_name   String?   @db.VarChar(100)
  survey_email  String?   @db.VarChar(200)
  survey_choice String    @db.VarChar(100)
}

model doctor {
  doctor_id          Int       @id @default(autoincrement())
  doctor_first_name  String?   @db.VarChar(30)
  doctor_last_name   String?   @db.VarChar(30)
  doctor_email       String    @db.VarChar(100)
  doctor_description String?   @db.VarChar(10000)
  doctor_image       String?   @db.VarChar(500)
  doctor_phone       Int?
  booking            booking[]
}

model patient {
  patient_id         Int       @id @default(autoincrement())
  patient_first_name String?   @db.VarChar(30)
  patient_last_name  String?   @db.VarChar(30)
  patient_email      String    @db.VarChar(100)
  patient_phone      Int?
  booking            booking[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model CartInfo {
  cart_id       BigInt      @id @default(autoincrement())
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  quantity      Decimal     @db.Decimal
  product_price Decimal     @db.Decimal
  cookie_id     String      @db.Uuid
  purchased     Boolean     @default(false)
  product_id    BigInt
  price_id      BigInt
  CookieInfo    CookieInfo  @relation(fields: [cookie_id], references: [cookie_id], onDelete: Cascade)
  PriceInfo     PriceInfo   @relation(fields: [price_id], references: [price_id])
  ProductInfo   ProductInfo @relation(fields: [product_id], references: [product_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model CookieInfo {
  cookie_id      String     @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at     DateTime   @default(now()) @db.Timestamptz(6)
  user_id        String?
  payment_intent String?    @unique
  CartInfo       CartInfo[]
  User           User?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  OrderInfo      OrderInfo?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model OrderInfo {
  order_number   BigInt     @id @default(autoincrement())
  created_at     DateTime   @default(now()) @db.Timestamptz(6)
  order_total    Decimal?   @db.Decimal
  payment_intent String
  email          String
  cookie_id      String     @unique @db.Uuid
  tracking_id    String?
  CookieInfo     CookieInfo @relation(fields: [cookie_id], references: [cookie_id], onDelete: NoAction, onUpdate: NoAction)
}

model PriceInfo {
  created_at                                       DateTime      @default(now()) @db.Timestamptz(6)
  unit_amount                                      Decimal?      @db.Decimal
  updated_at                                       DateTime?     @default(now()) @db.Timestamptz(6)
  currency                                         String        @default("usd")
  price_id                                         BigInt        @id @default(autoincrement())
  product_id                                       BigInt
  CartInfo                                         CartInfo[]
  ProductInfo_PriceInfo_product_idToProductInfo    ProductInfo   @relation("PriceInfo_product_idToProductInfo", fields: [product_id], references: [product_id], onDelete: Cascade)
  ProductInfo_ProductInfo_default_priceToPriceInfo ProductInfo[] @relation("ProductInfo_default_priceToPriceInfo")
}

model ProductAvailabilityInfo {
  updated_at         DateTime    @default(now()) @db.Timestamptz(6)
  available_quantity Decimal     @default(0) @db.Decimal
  product_id         BigInt      @unique @default(autoincrement())
  id                 BigInt      @id @default(autoincrement())
  ProductInfo        ProductInfo @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
}

model ProductInfo {
  created_at                                     DateTime                 @default(now()) @db.Timestamptz(6)
  description                                    String?
  images                                         String[]
  name                                           String                   @unique
  updated_at                                     DateTime?                @default(now()) @db.Timestamptz(6)
  active                                         Boolean?                 @default(true)
  category                                       String?
  product_id                                     BigInt                   @id @default(autoincrement())
  default_price                                  BigInt?
  CartInfo                                       CartInfo[]
  PriceInfo_PriceInfo_product_idToProductInfo    PriceInfo[]              @relation("PriceInfo_product_idToProductInfo")
  ProductAvailabilityInfo                        ProductAvailabilityInfo?
  PriceInfo_ProductInfo_default_priceToPriceInfo PriceInfo?               @relation("ProductInfo_default_priceToPriceInfo", fields: [default_price], references: [price_id], onDelete: Restrict)
  ProductReviewInfo                              ProductReviewInfo[]
}

model ProductReviewInfo {
  review_id      BigInt       @id @default(autoincrement())
  created_at     DateTime     @default(now()) @db.Timestamptz(6)
  review_message String?
  review_star    Decimal      @default(5) @db.Decimal
  user_email     String?      @default("")
  product_id     BigInt?
  ProductInfo    ProductInfo? @relation(fields: [product_id], references: [product_id], onDelete: Restrict)
  User           User?        @relation(fields: [user_email], references: [email], onDelete: SetDefault)
}

model ScrapePriceInfo {
  price_id          BigInt              @id(map: "ScrapeProductPrice_pkey") @default(autoincrement())
  created_at        DateTime            @default(now()) @db.Timestamptz(6)
  unit_amount       Decimal?            @db.Decimal
  updated_at        DateTime?           @default(now()) @db.Timestamptz(6)
  currency          String?             @default("usd")
  ScrapeProductInfo ScrapeProductInfo[]
}

model ScrapeProductInfo {
  product_id      BigInt           @id(map: "scraptable_pkey") @default(autoincrement())
  created_at      DateTime         @default(now()) @db.Timestamptz(6)
  name            String           @unique(map: "scraptable_product_name_key")
  description     String?
  images          String[]
  category        String?
  updated_at      DateTime?        @default(now()) @db.Timestamptz(6)
  active          Boolean?         @default(true)
  default_price   BigInt?
  ScrapePriceInfo ScrapePriceInfo? @relation(fields: [default_price], references: [price_id], onDelete: Restrict)
}
